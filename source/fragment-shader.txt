#version 150

uniform mat4 model;
uniform sampler2D tex;

uniform struct Light {
	vec3 position;
	vec3 intensities; // Color
} light;

in vec2 fragTexCoord;
in vec3 fragNormal;
in vec3 fragVert;

out vec4 finalColor;

void main() {
	mat3 normalMatrix = transpose(inverse(mat3(model)));
	vec3 normal = normalize(normalMatrix * fragNormal);

	// position of fragment in world coordinates
	vec3 fragPosition = vec3(model * vec4(fragVert, 1));

	// vector from this pixel to light source
	vec3 surfaceToLight = light.position - fragPosition;

	float brightness = dot(normal, surfaceToLight) / (length(surfaceToLight) * length(normal));
	brightness = clamp(brightness, 0, 1);

	vec4 surfaceColor = texture(tex, fragTexCoord);
	finalColor =  brightness * vec4(light.intensities, 1) * surfaceColor;
	
	// Only use Texture, no lighting
	//finalColor = surfaceColor;
}